c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
1:20
pi:10
15:1
`:
?`:
?`:`
seq(1,20)
seq(0,10,by=.5)
seq(5,10,length=30)
seq(5, 10, length=30)
seq(5, 10, length=30)
my_seq<-seq(5, 10, length=30)
length(my_seq
)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(.5,55,-10,6)
tf<-num_vect <1
tf
num_vect >=6
my_char<-c("my","name","is")
my_char
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char,"Chuck")
my_name
paste(my_name)
paste(my_name, collapse =
" '")
paste(my_name, collapes=" ")
Use paste(my_name, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
past(1:3, c("X","Y","Z"), sep="")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44,NA,5,NA)
x
x83
x*3
y <- rnorm(1000)
y
y <- rnorm(1000)
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2) <- c("foo", "bar",
| "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_v)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attr(my_vector)
attributes(my_vector)
my_v
my_vector
class(my_v)
class(my_vector)
class(my_vector[1])
my_matrix<-my_vector
?matrix
matrix(data=1:20,nrow=4,ncol=5)
my_matrix2<-matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
?colnames
colnames(my_data) <- cnames
my_data
add2 <- function (x,y) {
x+y
}
add(3,5)
add2(3,5)
above10 <- function (x) {
use <- x>10
x[use]
}
above10 <- function (x) {
use <- x>10
x[use]
}
above <- function (x,n=10) {
use <- x>n
x[use]
}
x <- 1:20
above10(x)
above(x,19)
above(x)
library(xlsx)
# Reading specific rows and columns
colIndex <- 7:15
rowIndex <- 18:23
library("rJava")
sessioninfo()
sessionInfo()
library('rJava')
install.package('rJava')
install.Package('rJava')
install.packages("rJava")
library('rJava')
library(rJava)
`install.packages('rJava',,'http://www.rforge.net/')`
install.packages('rJava',,'http://www.rforge.net/')
install.packages('rJava','http://www.rforge.net/')
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
library(rJava)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
library(ggplot)
library()
load(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
?geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
#add Day to our cleanData
cleanData$Day <- weekdays(as.Date(as.character(cleanData$date)))
#add weekend value to our cleanData
weekendDays <- cleanData$Day == "Saturday" | cleanData$Day == "Sunday"
cleanData$Weekend[weekendDays] = "Weekend"
cleanData$Weekend[!weekendDays] = "Weekday"
weekendData <- cleanData[cleanData$Weekend=="Weekend",]
weekdayData <- cleanData[cleanData$Weekend=="Weekday",]
#calculate the mean steps for each interval
WDavgSteps <- tapply(weekdayData$steps, weekdayData$time, mean, na.rm=TRUE)
#create date frame with mean steps
WDactivityPattern <- data.frame(time=as.POSIXct(names(WDavgSteps)),
avgSteps=avgSteps)
#calculate the mean steps for each interval
WEavgSteps <- tapply(weekendData$steps, weekendData$time, mean, na.rm=TRUE)
#create date frame with mean steps
WEactivityPattern <- data.frame(time=as.POSIXct(names(WEavgSteps)),
avgSteps=avgSteps)
source('~/.active-rstudio-document', echo=TRUE)
setwd("..")
getwd()
setwd("R_Stuff//datasciencecoursera")
getwd()
setwd("../Courera//RepData_PeerAssessment1")
source('~/.active-rstudio-document', echo=TRUE)
#calculate the mean steps for each WE interval
WEavgSteps <- tapply(weekendData$steps, weekendData$time, mean, na.rm=TRUE)
#create date frame with mean steps
WEactivityPattern <- data.frame(time=as.POSIXct(names(WEavgSteps)),
WEavgSteps=WEavgSteps)
WEPlot <- ggplot(
WEactivityPattern,
aes(intervals, avgSteps),
)
WEPlot +
geom_line(colour="blue") +
ggtitle("Time Series Plot of the 5m Interval and the avg No. Steps Taken") +
xlab("5 Min Intervals") +
ylab("Avg Num Steps Taken")
#calculate the mean steps for each WE interval
WDavgSteps <- tapply(weekdayData$steps, weekdayData$time, mean, na.rm=TRUE)
#create date frame with mean steps
WDactivityPattern <- data.frame(time=as.POSIXct(names(WDavgSteps)),
WDavgSteps=WDavgSteps)
WDPlot <- ggplot(
WDactivityPattern,
aes(intervals, avgSteps),
)
WDPlot +
geom_line(colour="green") +
ggtitle("Time Series Plot of the 5m Interval and the avg No. Steps Taken") +
xlab("5 Min Intervals") +
ylab("Avg Num Steps Taken")
#calculate the mean steps for each interval
CleanavgSteps <- tapply(cleanData$steps, CleanData$time, mean, na.rm=TRUE)
#create date frame with mean steps
CleanactivityPattern <- data.frame(time=as.POSIXct(names(CleanavgSteps)),
CleanavgSteps=CleanavgSteps)
myPlot <- ggplot(
activityPattern,
aes(intervals, avgSteps),
face_grid(. ~ Weekend)
)
#calculate the mean steps for each interval
CleanavgSteps <- tapply(cleanData$steps, cleanData$time, mean, na.rm=TRUE)
#create date frame with mean steps
CleanactivityPattern <- data.frame(time=as.POSIXct(names(CleanavgSteps)),
CleanavgSteps=CleanavgSteps)
myPlot <- ggplot(
activityPattern,
aes(intervals, avgSteps),
face_grid(. ~ Weekend)
)
myPlot
#calculate the mean steps for each interval
CleanavgSteps <- tapply(cleanData$steps, cleanData$time, mean, na.rm=TRUE)
#create date frame with mean steps
CleanactivityPattern <- data.frame(time=as.POSIXct(names(CleanavgSteps)),
CleanavgSteps=CleanavgSteps)
myPlot <- ggplot(
CleanactivityPattern,
aes(intervals, CleanavgSteps),
face_grid(. ~ Weekend)
)
myPlot
View(activityPattern)
#calculate the mean steps for each interval
CleanavgSteps <- tapply(cleanData$steps, cleanData$time, mean, na.rm=TRUE)
#create date frame with mean steps
CleanactivityPattern <- data.frame(time=as.POSIXct(names(CleanavgSteps)),
CleanavgSteps=CleanavgSteps, Weekend)
myPlot <- ggplot(
CleanactivityPattern,
aes(intervals, CleanavgSteps),
face_grid(. ~ Weekend)
)
myPlot
View(CleanactivityPattern)
CleanavgSteps=CleanavgSteps, cleanData$Weekend)
CleanactivityPattern <- data.frame(time=as.POSIXct(names(CleanavgSteps)),                             CleanavgSteps=CleanavgSteps, cleanData$Weekend)
CleanactivityPattern <- data.frame(time=as.POSIXct(names(CleanavgSteps)),
CleanavgSteps=CleanavgSteps, cleanDataWeekend)
#calculate the mean steps for each interval
CleanavgSteps <- tapply(cleanData$steps, cleanData$time, mean, na.rm=TRUE)
#create date frame with mean steps
CleanactivityPattern <- data.frame(time=as.POSIXct(names(CleanavgSteps)),
CleanavgSteps=CleanavgSteps, cleanData$Weekend)
myPlot <- ggplot(
CleanactivityPattern,
aes(intervals, CleanavgSteps),
face_grid(. ~ Weekend)
)
myPlot
#calculate the mean steps for each interval
CleanavgSteps <- tapply(cleanData$steps, cleanData$time, mean, na.rm=TRUE)
#create date frame with mean steps
CleanactivityPattern <- data.frame(time=as.POSIXct(names(CleanavgSteps)),
CleanavgSteps=CleanavgSteps, cleanData$Weekend)
myPlot <- ggplot(
CleanactivityPattern,
aes(intervals, CleanavgSteps),
face_grid(. ~ Weekend)
)
myPlot
#calculate the mean steps for each interval
CleanavgSteps <- tapply(cleanData$steps, cleanData$time, mean, na.rm=TRUE)
#create date frame with mean steps
CleanactivityPattern <- data.frame(time=as.POSIXct(names(CleanavgSteps)),
CleanavgSteps=CleanavgSteps,
dayType=as.factor(crep('weekday',288),
rep('weekend'),288))
myPlot <- ggplot(
CleanactivityPattern,
aes(intervals, CleanavgSteps),
face_grid(. ~ Weekend)
)
myPlot
#calculate the mean steps for each interval
CleanavgSteps <- tapply(cleanData$steps, cleanData$time, mean, na.rm=TRUE)
#create date frame with mean steps
CleanactivityPattern <- data.frame(time=as.POSIXct(names(CleanavgSteps)),
CleanavgSteps=CleanavgSteps,
dayType=as.factor(c(rep('weekday',288),
rep('weekend'),288)))
myPlot <- ggplot(
CleanactivityPattern,
aes(intervals, CleanavgSteps),
face_grid(. ~ Weekend)
)
myPlot
#calculate the mean steps for each interval
CleanavgSteps <- tapply(cleanData$steps, cleanData$time, mean, na.rm=TRUE)
#create date frame with mean steps
CleanactivityPattern <- data.frame(time=as.POSIXct(names(CleanavgSteps)),
CleanavgSteps=CleanavgSteps,
dayType=as.factor(c(rep('weekday',290),
rep('weekend'),290)))
myPlot <- ggplot(
CleanactivityPattern,
aes(intervals, CleanavgSteps),
face_grid(. ~ Weekend)
)
myPlot
#add Day to our cleanData
cleanData$Day <- weekdays(as.Date(as.character(cleanData$date)))
#add weekend value to our cleanData
weekendDays <- cleanData$Day == "Saturday" | cleanData$Day == "Sunday"
cleanData$Weekend[weekendDays] = "Weekend"
cleanData$Weekend[!weekendDays] = "Weekday"
weekendData <- cleanData[cleanData$Weekend=="Weekend",]
weekdayData <- cleanData[cleanData$Weekend=="Weekday",]
#create date frame with mean steps FOR weekdays and weekends
cleanData$Weekend <- as.factor(c("weekend","Weekday"))
summary(cleanData)
#add Day to our cleanData
cleanData$Day <- weekdays(as.Date(as.character(cleanData$date)))
#add weekend value to our cleanData
weekendDays <- cleanData$Day == "Saturday" | cleanData$Day == "Sunday"
cleanData$DatType[weekendDays] = "Weekend"
cleanData$DayType[!weekendDays] = "Weekday"
weekendData <- cleanData[cleanData$DayType=="Weekend",]
weekdayData <- cleanData[cleanData$DayType=="Weekday",]
#create date frame with mean steps FOR weekdays and weekends
cleanData$DayType <- as.factor(c("weekend","Weekday"))
summary(cleanData)
#add Day to our cleanData
cleanData$Day <- weekdays(as.Date(as.character(cleanData$date)))
#add weekend value to our cleanData
weekendDays <- cleanData$Day == "Saturday" | cleanData$Day == "Sunday"
cleanData$DayType[weekendDays] = "Weekend"
cleanData$DayType[!weekendDays] = "Weekday"
weekendData <- cleanData[cleanData$DayType=="Weekend",]
weekdayData <- cleanData[cleanData$DayType=="Weekday",]
#create date frame with mean steps FOR weekdays and weekends
cleanData$DayType <- as.factor(c("weekend","Weekday"))
summary(cleanData)
source('~/.active-rstudio-document', echo=TRUE)
#add Day to our cleanData
cleanData$Day <- weekdays(as.Date(as.character(cleanData$date)))
#add weekend value to our cleanData
weekendDays <- cleanData$Day == "Saturday" | cleanData$Day == "Sunday"
cleanData$DayType[weekendDays] = "Weekend"
cleanData$DayType[!weekendDays] = "Weekday"
weekendData <- cleanData[cleanData$DayType=="Weekend",]
weekdayData <- cleanData[cleanData$DayType=="Weekday",]
#create date frame with mean steps FOR weekdays and weekends
cleanData$DayType <- as.factor(c("weekend","Weekday"))
summary(cleanData)
View(cleanData)
#add Day to our cleanData
cleanData$Day <- weekdays(as.Date(as.character(cleanData$date)))
#add weekend value to our cleanData
weekendDays <- cleanData$Day == "Saturday" | cleanData$Day == "Sunday"
cleanData$DayType[weekendDays] = "Weekend"
cleanData$DayType[!weekendDays] = "Weekday"
cleanData$DayType <- as.factor(c("Weekend","Weekday"))
summary(cleanData)
#add Day to our cleanData
cleanData$Day <- weekdays(as.Date(as.character(cleanData$date)))
#add weekend value to our cleanData
cleanData$DayType <- as.factor(c("Weekend","Weekday"))
weekendDays <- cleanData$Day == "Saturday" | cleanData$Day == "Sunday"
cleanData$DayType[weekendDays] = "Weekend"
cleanData$DayType[!weekendDays] = "Weekday"
summary(cleanData)
cleanAvgSteps <- tapply(cleanData$steps,
interaction(cleanData$time, cleanData$DayType),
mean)
cleanPattern <- data.frame(time=asPOSIXct(names(cleanAvgSteps)),
cleanAvgSteps = cleanAvgSteps,
DayType = as.factor(c("Weekend","Weekday")))
cleanAvgSteps <- tapply(cleanData$steps,
interaction(cleanData$time, cleanData$DayType),
mean)
cleanPattern <- data.frame(time=as.POSIXct(names(cleanAvgSteps)),
cleanAvgSteps = cleanAvgSteps,
DayType = as.factor(c("Weekend","Weekday")))
cleanAvgSteps <- tapply(cleanData$steps,
interaction(cleanData$time, cleanData$DayType),
mean)
cleanPattern <- data.frame(time=as.POSIXct(names(cleanAvgSteps)),
cleanAvgSteps = cleanAvgSteps,
DayType = as.factor(c("Weekend","Weekday")))
ggplot(cleanPattern, aes(time, cleanAvgSteps)) +
geomline() +
facet_grid(. ~ DayType)
cleanAvgSteps <- tapply(cleanData$steps,
interaction(cleanData$time, cleanData$DayType),
mean)
cleanPattern <- data.frame(time=as.POSIXct(names(cleanAvgSteps)),
cleanAvgSteps = cleanAvgSteps,
DayType = as.factor(c("Weekend","Weekday")))
ggplot(cleanPattern, aes(time, cleanAvgSteps)) +
geom_line() +
facet_grid(. ~ DayType)
cleanAvgSteps <- tapply(cleanData$steps,
interaction(cleanData$time, cleanData$DayType),
mean)
cleanPattern <- data.frame(time=as.POSIXct(names(cleanAvgSteps)),
cleanAvgSteps = cleanAvgSteps,
DayType = as.factor(c("Weekend","Weekday")))
ggplot(cleanPattern, aes(time, cleanAvgSteps)) +
geom_line() +
xlab("5 minute intervals") +
ylab("Average number of steps") +
facet_grid(. ~ DayType)
cleanAvgSteps <- tapply(cleanData$steps,
interaction(cleanData$time, cleanData$DayType),
mean)
cleanPattern <- data.frame(time=as.POSIXct(names(cleanAvgSteps)),
cleanAvgSteps = cleanAvgSteps,
DayType = as.factor(c("Weekend","Weekday")))
ggplot(cleanPattern, aes(time, cleanAvgSteps)) +
geom_line() +
xlab("Daily 5 minute Intervals") +
ylab("Average Number of Steps") +
scale_x_datetime(labels=date_format(format='%H:%M'))
facet_grid(. ~ DayType)
cleanAvgSteps <- tapply(cleanData$steps,
interaction(cleanData$time, cleanData$DayType),
mean)
cleanPattern <- data.frame(time=as.POSIXct(names(cleanAvgSteps)),
cleanAvgSteps = cleanAvgSteps,
DayType = as.factor(c("Weekend","Weekday")))
ggplot(cleanPattern, aes(time, cleanAvgSteps)) +
geom_line() +
xlab("Daily 5 minute Intervals") +
ylab("Average Number of Steps") +
scale_x_datetime(labels = date_format(format =' %H:%M')) +
facet_grid(. ~ DayType)
cleanAvgSteps <- tapply(cleanData$steps,
interaction(cleanData$time, cleanData$DayType),
mean)
cleanPattern <- data.frame(time=as.POSIXct(names(cleanAvgSteps)),
cleanAvgSteps = cleanAvgSteps,
DayType = as.factor(c("Weekend","Weekday")))
library(scales)
ggplot(cleanPattern, aes(time, cleanAvgSteps)) +
geom_line() +
xlab("Daily 5 minute Intervals") +
ylab("Average Number of Steps") +
scale_x_datetime(labels = date_format(format =' %H:%M')) +
facet_grid(. ~ DayType)
cleanAvgSteps <- tapply(cleanData$steps,
interaction(cleanData$time, cleanData$DayType),
mean)
cleanPattern <- data.frame(time=as.POSIXct(names(cleanAvgSteps)),
cleanAvgSteps = cleanAvgSteps,
DayType = as.factor(c("Weekend","Weekday")))
library(scales)
ggplot(cleanPattern, aes(time, cleanAvgSteps)) +
geom_line(color="blue") +
xlab("Daily 5 minute Intervals") +
ylab("Average Number of Steps") +
scale_x_datetime(labels = date_format(format =' %H:%M')) +
facet_grid(. ~ DayType)
summary(cleanPattern$DayType=="Weekend")
summary(cleanPattern$DayType=="weekday")
tapply(cleanPattern$)
summary(cleanPattern)
summary(cleanData)
summary(cleanData$DayType=="Weekday")
cleanData$DayType=="Weekday"
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
View(cleanData)
